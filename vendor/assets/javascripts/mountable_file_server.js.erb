document.addEventListener('change', handleChangeEvent);

function handleChangeEvent(event) {
  var input = event.target;

  if (input.tagName !== 'INPUT' || input.type !== 'file' || !input.getAttribute('data-upload-url')) { return; }

  var file = input.files[0];

  uploadFile(file, input);
}

function uploadFile(file, input) {
  var url = input.getAttribute('data-upload-url');
  var xhr = new XMLHttpRequest();
  var formData = new FormData();
  var csrfElement = queryClosest(input, 'input[name=authenticity_token]');

  xhr.open('POST', url, true);

  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
      handleUploadedFile(xhr.responseText, input)
      dispatchEvent(input, 'upload:success', { fileURL: xhr.responseText });
    }
  }

  xhr.upload.addEventListener('progress', function(progressEvent) {
    if (progressEvent.lengthComputable) {
      dispatchEvent(input, 'upload:progress', { progress: progressEvent });
    }
  });

  formData.append('file', file);
  // formData.append('_csrf_token', csrfElement.value);

  xhr.send(formData);
  dispatchEvent(input, 'upload:start', { file: file });
}

function handleUploadedFile(fileURL, input) {
  var wrapper = queryClosest(input, '.<%= MountableFileServer.configuration.input_class %>');
  var hidden = wrapper.querySelector('input[type=hidden]');

  hidden.value = fileURL;
}

function queryClosest(element, selector) {
  if (element !== null) {
    return element.querySelector(selector) || queryClosest(element.parentNode, selector);
  }
}

function dispatchEvent(element, name, payload) {
  var event = document.createEvent('CustomEvent');
  event.initCustomEvent(name, true, false, payload);
  element.dispatchEvent(event);
};
